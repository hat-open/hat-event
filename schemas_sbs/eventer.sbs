module HatEventer

MsgInitReq = Record {
    clientName:      String
    clientToken:     Optional(String)
    subscriptions:   Array(EventType)
    serverId:        Optional(Integer)
    persisted:       Boolean
}

MsgInitRes = Choice {
    success:  Status
    error:    String
}

MsgStatusNotify = Status

MsgStatusAck = None

MsgEventsNotify = Array(Event)

MsgRegisterReq = Array(RegisterEvent)

MsgRegisterRes = Choice {
    events:   Array(Event)
    failure:  None
}

MsgQueryReq = QueryParams

MsgQueryRes = QueryResult

Status = Choice {
    standby:      None
    operational:  None
}

Timestamp = Record {
    s:   Integer
    us:  Integer
}

EventId = Record {
    server:    Integer
    session:   Integer
    instance:  Integer
}

Order = Choice {
    descending:  None
    ascending:   None
}

OrderBy = Choice {
    timestamp:        None
    sourceTimestamp:  None
}

EventType = Array(String)

EventPayload = Choice {
    binary:  EventPayloadBinary
    json:    EventPayloadJson
}

EventPayloadBinary = Record {
    type:  String
    data:  Bytes
}

EventPayloadJson = String

Event = Record {
    id:               EventId
    type:             EventType
    timestamp:        Timestamp
    sourceTimestamp:  Optional(Timestamp)
    payload:          Optional(EventPayload)
}

RegisterEvent = Record {
    type:             EventType
    sourceTimestamp:  Optional(Timestamp)
    payload:          Optional(EventPayload)
}

QueryParams = Choice {
    latest:      QueryLatestParams
    timeseries:  QueryTimeseriesParams
    server:      QueryServerParams
}

QueryLatestParams = Record {
    eventTypes:  Optional(Array(EventType))
}

QueryTimeseriesParams = Record {
    eventTypes:   Optional(Array(EventType))
    tFrom:        Optional(Timestamp)
    tTo:          Optional(Timestamp)
    sourceTFrom:  Optional(Timestamp)
    sourceTTo:    Optional(Timestamp)
    order:        Order
    orderBy:      OrderBy
    maxResults:   Optional(Integer)
    lastEventId:  Optional(EventId)
}

QueryServerParams = Record {
    serverId:     Integer
    persisted:    Boolean
    maxResults:   Optional(Integer)
    lastEventId:  Optional(EventId)
}

QueryResult = Record {
    events:       Array(Event)
    moreFollows:  Boolean
}
